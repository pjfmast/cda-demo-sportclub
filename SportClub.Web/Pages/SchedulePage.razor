@page "/"
@inject HttpClient Http

<PageTitle>Todays trainings</PageTitle>

<h3>SchedulePage</h3>
@if (Lessons == null)
{
    <h3>Loading lessons...</h3>
}

else if (Lessons.Count() > 0)
{
    <h3 class="mb-5">Workouts you can enroll on @DateOnly.FromDateTime(DateTime.Now)</h3>
    <div class="grid">

        @foreach (var lesson in Lessons)
        {
            <div class="card shadow" style="width: 18rem;">
                <img src="@lesson.Image" class="card-img-top" alt="@lesson.Title">
                <div class="card-body">
                    <h5 class="card-title">@lesson.Title</h5>
                    <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-map-marker"></span> @lesson.Location</h6>
                    <div class="d-flex justify-content-between">
                        <span><span class="oi oi-clock mr-2"></span> @lesson.StartTime.ToString("HH:mm") (@lesson.Duration minutes)</span>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <h4>No more workouts today, check-in tomorrow!</h4>
}

@code {
    public required IEnumerable<LessonDto> Lessons { get; set; } = Enumerable.Empty<LessonDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<IEnumerable<LessonDto>>("api/Schedule/GetTodaysLessons");
            Lessons = result ?? Enumerable.Empty<LessonDto>();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }

    }
}
